package inf101.v20.sem2.game;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Random;
import java.util.Scanner;
import inf101.v20.sem2.board.Board;

/**
 * Class consisting of the distinct code needed to run a Connect Four game. Uses code frome Game.java
 * @author Kasper
 *
 */

public class Connect4 extends Game {
	
	//Values distinct for Connect Four
	final int height = 8;
	final int width = 8;
	int totalMoves;
	int[][] board;
	
	//Operator
	public Connect4() {
		//Board with size height x width
		board = new int[height][width];
		totalMoves = 0;
	}
	
	/**
	 * Runs the game with multiplayer conditions
	 */
	public void runMultiplayer() throws IOException {
		
		System.out.println("Welcome to Connect Four! Type in 0-7, depending on what column you want to place in.");
		createBoard(board);
		
		Scanner playerInput = new Scanner(new InputStreamReader(System.in));
		
		mainLoop:
			while(true) {
				int column = 0;
				//Player1
				while(true) {
					System.out.println("Player 1 placement:");
					column = Integer.parseInt(playerInput.nextLine());
					
					if(canPlace(column)) {
						if(place(column, 1)) {
							createBoard(board);
							System.out.println("Game over. Player 1 wins!");
							break mainLoop;
						}
						break;
					}
					else {
						System.out.println("Placement in column " + column + " is already taken! Choose new placement: ");
					}
				}
				createBoard(board);
				
				if(isFull()) {
					System.out.println("Its a draw.");
					break;
				}
				
				//Player 2
					while(true) {
						System.out.println("Player 2 placement:");
						column = Integer.parseInt(playerInput.nextLine());
						
						if(canPlace(column)) {
							if(place(column, 2)) {
								createBoard(board);
								System.out.println("Game over. Player 2 wins!");
								break mainLoop;
							}
							break;
						}
						else {
							System.out.println("Column " + column + " is already full!");
						}
					}
					createBoard(board);
					
					if(isFull()) {
						System.out.println("Its a draw.");
						break;
					}
			}
	}
	
	/**
	 * Runs the game with singleplayer conditions
	 */
	public void runSingleplayer() throws IOException {

		System.out.println("Welcome to Connect Four! Type in 0-7, depending on what column you want to place in.");
		createBoard(board);
		
		Scanner playerInput = new Scanner(new InputStreamReader(System.in));
		
		mainLoop:
			while(true) {
				int column = 0;
				//Player1
				while(true) {
					System.out.println("Player 1 placement:");
					column = Integer.parseInt(playerInput.nextLine());
					
					if(canPlace(column)) {
						if(place(column, 1)) {
							createBoard(board);
							System.out.println("Game over. Player 1 wins!");
							break mainLoop;
						}
						break;
					}
					else {
						System.out.println("Placement in column " + column + " is already taken! Choose new placement: ");
					}
				}
				createBoard(board);
				
				if(isFull(totalMoves)) {
					System.out.println("Its a draw.");
					break;
				}
				
				//CPU
					while(true) {
						column = getRandomNumber(0, 8);
						
						if(canPlace(column)) {
							if(place(column, 2)) {
								createBoard(board);
								System.out.println("Game over. CPU wins!");
								break mainLoop;
							}
							break;
						}
						else {
							System.out.println("");
						}
					}
					createBoard(board);
					
					if(isFull(totalMoves)) {
						System.out.println("Its a draw.");
						break;
					}
			}
		
	}

	/**
	 * Places a playerobject in the selected column
	 */
	public boolean place(int column, int playerNum) {
		
		if(column < 0 || column > 7) {
			throw new IndexOutOfBoundsException();
		}
		
		int i = 0;
		
		for(i = 0; i < height; i++) {
			
			if(board[i][column] == 1 || board[i][column] == 2) {
				board[i-1][column] = playerNum;
				break;
			}
		}
		
		if(i == height) {
			board[i-1][column] = playerNum;
		}
		
		totalMoves++;
		return checkVictory(i-1, column);
	}
	
	/**
	 * Checks if player can place in selected column
	 */
	public boolean canPlace(int column) {
		return board[0][column] == 0;
	}
	
	/**
	 * Checks if the board is full
	 */
	public boolean isFull(int totalMoves) {
		return totalMoves == height * width;
	}

	/**
	 * Checks if anyone has won
	 */
	public boolean checkVictory(int x, int y) {

		int num = board[x][y];
        int count = 0;
        int i = y;
        
        //Horizontal check
        while(i < width && board[x][i] == num){
        	
            count++;
            i++;
        }
        
        i=y-1;
        while(i >= 0 && board[x][i] == num){
        	
            count++;
            i--;
        }
        
        //If someone has reached 4 in a row
        if(count == 4) {
            return true;
        }
        
        //Vertical check
        count = 0;
        int j = x;
        while(j < height && board[j][y] == num){
        	
            count++;
            j++;
        }
        if(count == 4) {
            return true;
        }
        
        //Left diagonal check
        count=0;
        i = x;
        j = y;
        while(i < width && j < height && board[i][j] == num){
        	
            count++;
            i++;
            j++;
        }
        
        i= x-1;
        j= y-1;
        while(i >= 0 && j >= 0 && board[i][j] == num){
        	
            count++;
            i--;
            j--;
        }
        
      //If someone has reached 4 in a row
        if(count == 4) {
            return true;
        }
        
        //Right diagonal check
        count = 0;
        i = x;
        j = y;
        while(i < width && j >= 0 && board[i][j] == num){
        	
            count++;
            i++;
            j--;
        }
        
        i= x-1;
        j= y+1;
        while(i >= 0 && j < height && board[i][j] == num){
            count++;
            i--;
            j++;
        }
        
        //If someone has reached 4 in a row
        if(count == 4) {
            return true;
        }
        
        return false;
    }
	
}
