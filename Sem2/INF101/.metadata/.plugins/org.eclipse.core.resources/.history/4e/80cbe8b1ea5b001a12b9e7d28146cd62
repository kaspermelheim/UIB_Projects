package inf101.v20.rogue101.objects;

import java.util.ArrayList;
import java.util.List;

import inf101.v20.grid.GridDirection;
import inf101.v20.grid.ILocation;
import inf101.v20.rogue101.RogueApplication;
import inf101.v20.rogue101.game.IGame;
import javafx.scene.input.KeyCode;
/**
 * En spiller i Rogue 101 
 * 
 * Spilleren navigerer labyrinten og sl친ss med monster. For 친 komme seg ut 
 * og vinne spille m친 spilleren g친 gjennom portalen; for 친 친pne portalen 
 * m친 den finne amuletten og b칝re den med seg. 
 * 
 * P친 veien kan den plukke opp gull og sl친ss med monster
 * 
 * @author Anna Eilertsen - anna.eilertsen@uib.no
 *
 */
public class Player implements IPlayer {
	/**
	 * char representation of this type 
	 */
	public static final char SYMBOL = '@';
	private static final int MAXHEALTH = 100;
	private int attack;
	private int defence;
	private int damage;
	private int hp;
	private String name;
	private IItem backpack = null; 

	public Player() {
		attack = 10;
		defence = 2;
		damage = 3;
		hp = Player.MAXHEALTH;
		name = System.getProperty("user.name");
	}

	@Override
	public int getAttack() {
		return attack;
	}

	@Override
	public int getDamage() {
		return damage;
	}

	@Override
	public int getCurrentHealth() {
		return hp;
	}

	@Override
	public int getDefence() {
		return defence;
	}

	@Override
	public int getMaxHealth() {
		return Player.MAXHEALTH;
	}

	@Override
	public String getShortName() {
		return getLongName();
	}
	
	@Override
	public String getLongName() {
		return name;
	}

	@Override
	public int getSize() {
		return 5;
	}

	@Override
	public String getGraphicTextSymbol() {
		if (RogueApplication.USE_EMOJI) {
			return hp > 0 ? "游놎" : "丘쐞잺"; // 游뱞  丘썶잺 
		} else {
			return "" + SYMBOL;
		}
	}

	@Override
	public int handleDamage(int amount) {
		amount = Math.max(0, amount - defence);
		amount = Math.min(hp + 1, amount);
		hp -= amount;
		return amount;
	}

	@Override
	public void keyPressed(IGame game, KeyCode key) {
		System.err.println("Player moves");
		switch (key) {
		case LEFT:
			tryToMove(game, GridDirection.WEST);
			break;
		case RIGHT:
			tryToMove(game, GridDirection.EAST);
			break;
		case UP:
			tryToMove(game, GridDirection.NORTH);
			break;
		case DOWN:
			tryToMove(game, GridDirection.SOUTH);
			break;
		case P:
			pickUp(game);
			break;
		case D:
			drop(game);
			break;
		default:
			System.err.printf("Illegal key pressed. Key: %s", key);
		}
		showStatus(game);
	}

	private void tryToMove(IGame game, GridDirection dir) {
		if (game.canGo(dir)) {
			game.displayDebug("Moving.");
			game.move(dir);
		} 
		else {
			if(game.attack(dir))
				game.displayDebug("Victory!");
			else
				game.displayDebug("Ouch! Can't go there.");
		}
	}

	public void showStatus(IGame game) {
		game.displayMessage("Player has " + this.hp + " hp left holding " + backpack );
	}

	/**
	 * 
	 * Lager en ny feltvariabel backpack. Metoden pickUp sjekker s친 f칮rst om backpack ikke er tom. Dersom
	 * ja skal spiller f친 en beskjed om hva backpack inneholder. Dersom nei skal metoden hente non actor
	 * items p친 lokasjonen. Om det ikke finnes et opplukkbart item her stopper metoden, viss det finnes
	 * setter vi backpack = det itemet vi fant. Skrive ut passende melding til spiller.  
	 * @param game
	 */
	public void pickUp(IGame game) {
		
		if(backpack!=null) {
			game.displayMessage("Backpack already contains: " + backpack.getShortName());
			return; 
		}		
				
		List<IItem> pickups = game.getLocalNonActorItems();  
		if(pickups.size() == 0) {		  
			return;										
		}	
		backpack = game.pickUp(pickups.get(0));
		game.displayMessage("Picked up: " + backpack.getShortName());
	}

	/**
	 * Metode for 친 t칮mme backpacken. Sjekker f칮rst om bacpack er tom, dersom ja f친r spiller beskjed om 
	 * dette. Om det er et item i bacpack skal vi sette bacpack = null, s친nn som den originalt var.
	 * 
	 * @param game
	 */
	public void drop(IGame game) {
		if(backpack == null) {   
			game.displayMessage("Your bacpack is empty!"); 
			return;											
			}
		if(game.drop(backpack))	 {
			game.displayMessage("Dropped: " + backpack.getShortName());
			backpack = null;	
		}
		else {
			game.displayMessage("Item cannot be dropped"); 
		}
	}

	@Override
	public void doTurn(IGame game) {
	}
	
	@Override 
	public boolean isDestroyed() {
		return false; //Even when dead, the player should remain on the map
	}

	@Override
	public boolean hasItem(IItem item) {
		if(item.getShortName() == backpack.getShortName()) {
			return true;
		}
		return false;
	}
	
	@Override
	public char getSymbol() {
		return SYMBOL;
	}
}
