package inf101.v20.rogue101.objects;

import java.util.List;
import java.util.Random;

import inf101.v20.gfx.gfxmode.DrawHelper;
import inf101.v20.gfx.gfxmode.IBrush;
import inf101.v20.grid.GridDirection;
import inf101.v20.grid.ILocation;
import inf101.v20.rogue101.RogueApplication;
import inf101.v20.rogue101.game.IGame;

/**
 * En edderkopp i spillet Rogue 101. 
 * 
 * Edderkopper angriper spilleren hvis de kan. 
 * De er vanskelige √• drepe. 
 * 
 * @author Martin Vatshelle 
 *
 */
public class Spider implements IActor {
	/**
	 * char representation of this type 
	 */
	public static final char SYMBOL = 'S';
	public static Spider first = null;
	final static int MAXHEALTH = 10;
	private int hp;
	private int defence;
	private int attack;
	private int damage;
	private GridDirection lastDir;

	public Spider() {
		hp = Spider.MAXHEALTH;
		defence = 1;
		attack = 5;
		damage = 3;
		lastDir = GridDirection.NORTHEAST;
	}

	@Override
	public int getCurrentHealth() {
		return hp;
	}

	@Override
	public int getDefence() {
		return defence;
	}

	@Override
	public int getMaxHealth() {
		return Spider.MAXHEALTH;
	}

	@Override
	public String getShortName() {
		return getLongName();
	}

	@Override
	public String getLongName() {
		return "Spider";
	}

	@Override
	public int getSize() {
		return 2;
	}

	@Override
	public String getGraphicTextSymbol() {
		if (RogueApplication.USE_EMOJI) {
			return "üï∑Ô∏è";
		} else {
			return "" + SYMBOL;
		}
	}

	@Override
	public int handleDamage(int amount) {
		amount -= Math.min(amount, getDefence());
		int damage = Math.min(amount, hp);
		hp -= damage;
		return damage;
	}

	@Override
	public boolean draw(IBrush painter, double w, double h) {
		if (!RogueApplication.USE_EMOJI) {
			DrawHelper.drawSpider(painter, h, w, hp / getMaxHealth());
			return true;
		} else {
			return false;
		}
	}

	@Override
	public void doTurn(IGame game) {
		List<GridDirection> moves = game.getPossibleMoves();
		
		for(GridDirection dir : possibleMoves) {
			ILocation loc = game.getLocation(dir);
			if(game.containsItem(loc, Carrot.class)) {
				game.move(dir);
				return;
			}
		}
		
		if (game.canGo(lastDir)) {
			game.move(lastDir);
		} else {
			if (!moves.isEmpty()) {
				Random r = new Random();
				lastDir = moves.get(r.nextInt(moves.size()));
				game.move(lastDir);
			}
		}
	}

	@Override
	public int getAttack() {
		return this.attack;
	}

	@Override
	public int getDamage() {
		return this.damage;
	}
	
	@Override
	public char getSymbol() {
		return SYMBOL;
	}
}
