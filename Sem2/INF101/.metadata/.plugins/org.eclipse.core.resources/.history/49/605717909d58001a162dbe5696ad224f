package inf101.v20.rogue101.map;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.IdentityHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import inf101.v20.grid.GridDirection;
import inf101.v20.grid.IArea;
import inf101.v20.grid.ILocation;
import inf101.v20.grid.ILocationComparator;
import inf101.v20.grid.IMultiGrid;
import inf101.v20.grid.MultiGrid;
import inf101.v20.rogue101.game.IllegalMoveException;
import inf101.v20.rogue101.objects.IActor;
import inf101.v20.rogue101.objects.IItem;
import inf101.v20.rogue101.objects.Wall;

public class GameMap implements IGameMap {
	/**
	 * The grid that makes up our map
	 */
	private final IMultiGrid<IItem> grid;
	/**
	 * These locations have changed since last time graphics drew the screen,
	 * and need to be redrawn soon.
	 */
	private final Set<ILocation> dirtyLocs = new HashSet<>();
	/**
	 * An index of all the items in the map and their locations.
	 */
	// an IdentityHashMap uses object identity as a lookup key, so items are
	// considered equal if they are the same object (a == b)
	private final Map<IItem, ILocation> items = new IdentityHashMap<>();

	public GameMap(IArea area) {
		grid = new MultiGrid<>(area);
	}

	public GameMap(int width, int height) {
		grid = new MultiGrid<>(width, height);
	}

	/**
	 * This method adds an IItem to the given location.
	 * Since the draw method only draws one element in each cell,
	 * the first element is the one drawn
	 * In this implementation of IGameMap IItem's at same location 
	 * should be sorted such that the IItem with largest size() is first.
	 * 
	 */
	@Override
	public void add(ILocation loc, IItem item) {
		// keep track of location of all items
		items.put(item, loc);
		// also keep track of whether we need to redraw this cell
		dirtyLocs.add(loc);

		// do the actual adding
		List<IItem> list = grid.get(loc);
		list.add(item);
		Collections.sort(list, Collections.reverseOrder());
	}

	/**
	 * In this implementation of IGame an IActor can not go through Walls 
	 * and only one IActor can be at each cell
	 */
	@Override
	public boolean canGo(ILocation to) {
		return !grid.contains(to, (i) -> (i instanceof Wall || i instanceof IActor));
	}

	@Override
	public boolean hasNeighbour(ILocation from, GridDirection dir) {
		return from.canGo(dir);
	}

	@Override
	public boolean canGo(ILocation from, GridDirection dir) {
		if (!from.canGo(dir))
			return false;
		ILocation loc = from.go(dir);
		return canGo(loc);
	}

	/**
	 * Returns the ILocation's that needs to be redrawn due to some change
	 * that could lead to a different image being displayed at that ILocation
	 */
	public Set<ILocation> getDirtyLocs() {
		return dirtyLocs;
	}

	/**
	 *  In this implementation only 1 IActor can occupy each cell,
	 *  hence the size() of the list returned is at most 1.
	 */
	@Override
	public List<IActor> getActors(ILocation loc) {
		List<IActor> items = new ArrayList<>();
		for (IItem item : grid.get(loc)) {
			if (item instanceof IActor)
				items.add((IActor) item);
		}

		return items;
	}

	@Override
	public List<IItem> getAll(ILocation loc) {
		return Collections.unmodifiableList(grid.get(loc));
	}

	@Override
	public List<IItem> getAllModifiable(ILocation loc) {
		dirtyLocs.add(loc);
		return grid.get(loc);
	}

	@Override
	public void clean(ILocation loc) {
		// remove any items that have health < 0:
		if (grid.get(loc).removeIf((item) -> {
			if (item.isDestroyed()) {
				items.remove(item);
				return true;
			} else {
				return false;
			}
		}))

		dirtyLocs.add(loc);
	}

	@Override
	public IArea getArea() {
		return grid.getArea();
	}

	@Override
	public int getHeight() {
		return grid.getHeight();
	}

	@Override
	public List<IItem> getItems(ILocation loc) {
		List<IItem> items = new ArrayList<>(grid.get(loc));
		items.removeIf((i) -> i instanceof IActor);
		return items;
	}

	@Override
	public ILocation getLocation(IItem item) {
		return items.get(item);
	}

	@Override
	public ILocation getLocation(int x, int y) {
		return grid.getArea().location(x, y);
	}

	@Override
	public ILocation getNeighbour(ILocation from, GridDirection dir) {
		if (!hasNeighbour(from, dir))
			return null;
		else
			return from.go(dir);
	}

	@Override
	public int getWidth() {
		return grid.getWidth();
	}

	@Override
	public ILocation go(ILocation from, GridDirection dir) throws IllegalMoveException {
		if (!from.canGo(dir))
			throw new IllegalMoveException("Cannot move outside map!");
		ILocation loc = from.go(dir);
		if (!canGo(loc))
			throw new IllegalMoveException("Occupied!");
		return loc;
	}

	@Override
	public boolean has(ILocation loc, IItem target) {
		return grid.contains(loc, target);
	}

	@Override
	public boolean hasActors(ILocation loc) {
		return grid.contains(loc, (i) -> i instanceof IActor);
	}

	@Override
	public boolean hasItems(ILocation loc) {
		// true if grid cell contains an item which is not an IActor
		return grid.contains(loc, (i) -> !(i instanceof IActor));
	}

	@Override
	public boolean hasWall(ILocation loc) {
		return grid.contains(loc, (i) -> i instanceof Wall);
	}

	@Override
	public void remove(ILocation loc, IItem item) {
		grid.remove(loc, item);
		items.remove(item);
		dirtyLocs.add(loc);
	}

	@Override
	public List<ILocation> getNeighbourhood(ILocation loc, int dist) {
		List<ILocation> cells = new ArrayList<ILocation>();
		if (dist < 0 || loc == null) {
			throw new IllegalArgumentException();
		}
		else if (dist == 0) {
			return new ArrayList<>(); // empty!
		}
		else if (dist == 1) {
			
		}

		throw new UnsupportedOperationException();
	}
	

	/**
	 * Lager her en ny List liste, bruker for løkke og går over de fire retningene i FOUR_DIRECTIONS fra 
	 * GridDirection, og sjekker om canGo returnerer true på at tingen kan flytte seg fra currentLocation
	 * til direction. Dersom true legger vi til direction i liste. Returnerer så liste med mulige flytt.
	 */
	@Override
	public List<GridDirection> getPossibleMoves(ILocation currentLocation) {
		List<GridDirection> liste = new ArrayList<GridDirection>();
		for(GridDirection direction : GridDirection.FOUR_DIRECTIONS) {
			if(canGo(currentLocation, direction)) {
				liste.add(direction);
			}
		}
		return liste; // <- Remove this
	}

	@Override
	public List<ILocation> getReachable(ILocation loc, int dist) {
		return new ArrayList<>();
	}
}
