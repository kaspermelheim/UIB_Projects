[Semesteroppgave 2: Fire på rad og Tripp-trapp-tresko]

•Levert av:
kme020

•[ ] hele semesteroppgaven er ferdig og klar til retting!
•Code review:
•[ ] jeg har fått tilbakemelding underveis fra @brukernavn, ...
•[ ] jeg har gitt tilbakemelding underveis til @brukernavn, ...
•Sjekkliste:
•[ ] Kjørbart Fire på Rad-spill* [ ] Funksjonelt spill* [ ] Fungerende user interface* [ ] Støtter AI 
•[ ] Kjørbart Tripp-trapp-tresko-spill* [ ] Funksjonelt spill* [ ] Fungerende user interface* [ ] Støtter AI 
•[ ] Forklart designvalg, hvordan koden er organisert, abstraksjon, og andre ting 
•[ ] Tester
•[ ] Dokumentasjon (JavaDoc, kommentarer, diagrammer, README, etc.)
•[ ] Fornuftige navn på klasser, interfaces, metoder og variabler
•[ ] Fornuftige abstraksjoner og innkapsling (bruk av klasser, interface, metoder, etc.)

-Oversikt

(oversikt over koden din og det du har gjort)

Denne README noten består av all informasjonen rundt spillene jeg har laget, testing, bruk, design,
funksjonalitet osv. Jeg har valgt å ha alle komentarene mine inne i selve koden på engelsk,
som er god skikk når det kommer til alle applikasjoner man skal lage, da flere personer fra ulike
land kanskje kanskje vil bruke/jobbe med koden.

Hele applikasjonen er tekstbasert og foregår i konsollen, utover dette er det ikke noe ekstra GUI,
eller mer fancy presentasjoner av oppgaven. Jeg har valgt å ikke bruke eksempelkoden som allerede
var gitt. Dette fordi jeg ønsket å lage alt selv fra bunnen av, ut fra egen evne, og fra det
jeg selv har lært så langt i faget.



-Bruk

For å starte programmet kjør: GUIMain.java

Du blir spørt om du vil spille singleplayer (alene mot CPU) eller multiplayer (du mot en annen).
Skriv inn 1 for singleplayer eller 2 for multiplayer, og press "Enter".
Blir så bedt om å skrive inn navn man ønsker å bruke i spillet, og en velkomstmelding vil så
bli sendt ut. Programmet spør så om du vil spille TicTacToe eller Connect Four. 
Skriv inn 1 for TicTacToe eller 2 for Connect Four.

Dersom du har sendt inn 1:
TicTacToe:
Velkomstmelding spesifikt for spillet blir sendt ut (hvordan spille).
Det blir printet ut 3x3 brett, der celle øverst i venstre hjørne har posisjon 1, den rett til
høyre for 1 har posisjon 2.... nederst i høyre hjørne har pos 9. 
Du skriver inn tall fra 1-9 alt etter hvor du vil plassere brikke. Dersom noen får 3 på rad
vil spillet stoppe og gi ut en melding om hvem som vant. Spillet stopper også dersom antall 
trekk == width*height (9 for TicTacToe) (om alle posisjoner har blitt tatt). Den vil da gi ut 
en melding om at det er uavgjort.

Dersom du har sendt inn 2:
Connect Four:
Velkomstmelding spesifikt for spillet blir sendt ut (hvordan spille).
Det blir printet ut et 8x8 brett der kolonnen helt til venstre har nr. 0, kolonnen helt til
høgre har nr. 7. Du skriver inn tall fra 0-7 alt etter hvilken kolonne du vil slippe brikken
i. Dersom noen får 4 på rad vil spillet stoppe og gi ut en melding om hvem som vant. Spillet
stopper også dersom antall trekk == width*height (64 for Connect Four) (om alle posisjonen er
tatt). Den vil da gi ut en melding om at spillet er uavgjort.


-Designvalg

(hvordan du har valgt å løse oppgaven)

-Bruk av abstraksjon

(hvordan du har valgt objekter/klasser for å representere ting i spillet)

-Erfaring – hvilke valg viste seg å være gode / dårlige?

(designerfaringer – er det noe du ville gjort annerledes?)

-Testing

(hvordan du har testet ting)

-Funksjonalitet, bugs

(hva virker / virker ikke)

Virker ikke:

- Har laget en Board klasse som implementer IBoard. Ønket at begge spillene
skulle lage brettene ut i fra denne klassen, lagde derfor en ny Board(width, height) inne i 
spillklassene, og kalte på board.createBoard() for å lage board.
Den klarte å opprette brettet, men når "place" metoden i TicTacToe blir kalt på får jeg 
NullPointerException i case X alt etter hvilken X bruker skriver inn. 

-Evt. erfaring fra code review

(lærte du noe av å gå gjennom din eller andres kode?)

-Annet

(er det noe du ville gjort annerledes?)
