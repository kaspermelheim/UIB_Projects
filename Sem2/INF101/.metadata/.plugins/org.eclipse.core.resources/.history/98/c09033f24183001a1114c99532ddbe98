package inf101.v20.sem2.game;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Random;
import java.util.Scanner;

public class TicTacToeTest implements IGame {
	
	final int height = 3;
	final int width = 3;
	int totalMoves;
	int[][] board;
	
	public TicTacToeTest() {
		board = new int[height][width];
		totalMoves = 0;
	}
	
	public void runMultiplayer() throws IOException {
		
		System.out.println("Welcome to TicTacToe!");
		updateBoard();
		
		Scanner playerInput = new Scanner(new InputStreamReader(System.in));
		
		mainLoop:
			while(true) {
				int column = 0;
				//Player1
				while(true) {
					System.out.println("Player 1 placement:");
					column = Integer.parseInt(playerInput.nextLine());
					
					if(canPlace(column)) {
						if(place(column, 1)) {
							updateBoard();
							System.out.println("Game over. Player 1 wins!");
							break mainLoop;
						}
						break;
					}
					else {
						System.out.println("Placement in column " + column + " is already taken! Choose new placement: ");
					}
				}
				updateBoard();
				
				//Player 2
					while(true) {
						System.out.println("Player 2 placement:");
						column = Integer.parseInt(playerInput.nextLine());
						
						if(canPlace(column)) {
							if(place(column, 2)) {
								updateBoard();
								System.out.println("Game over. Player 2 wins!");
								break mainLoop;
							}
							break;
						}
						else {
							System.out.println("Column " + column + " is already full!");
						}
					}
					updateBoard();
					
					if(isFull()) {
						System.out.println("Its a draw.");
						break;
					}
			}
	}
	
	public void runSingleplayer() throws IOException {

		System.out.println("Welcome to TicTacToe! Type 1 to place in upper left corner, 2 for top row middle etc.");
		updateBoard();
		
		Scanner playerInput = new Scanner(new InputStreamReader(System.in));
		
		mainLoop:
			while(true) {
				int column = 0;
				//Player1
				while(true) {
					System.out.println("Player 1 placement:");
					column = Integer.parseInt(playerInput.nextLine());
					
					if(canPlace(column)) {
						if(place(column, 1)) {
							updateBoard();
							System.out.println("Game over. Player 1 wins!");
							break mainLoop;
						}
						break;
					}
					else {
						System.out.println("Placement in column " + column + " is already taken! Choose new placement: ");
					}
				}
				updateBoard();
				
				//CPU
					while(true) {
						column = getRandomColumn(width);
						
						if(canPlace(column)) {
							if(place(column, 2)) {
								updateBoard();
								System.out.println("Game over. CPU wins!");
								break mainLoop;
							}
							break;
						}
						else {
							System.out.println("");
						}
					}
					updateBoard();
					
					if(isFull()) {
						System.out.println("Its a draw.");
						break;
					}
			}
		
	}
	
	public void runTest() {
		board[0][0] = '1';
		board[2][1] = '2';
		updateBoard();
	}


	public int getRandomColumn(int width) {
		
		Random random = new Random();
		int num = random.ints(1, 0, width).findFirst().getAsInt();
		
		return num;
		
	}

	
	public boolean place(int placement, int playerNum) {
		
		switch(placement) {
		case 1:
			board[0][0] = playerNum;
			break;
		case 2:
			board[0][1] = playerNum;
			break;
		case 3:
			board[0][2] = playerNum;
			break;
		case 4:
			board[1][0] = playerNum;
			break;
		case 5:
			board[1][1] = playerNum;
			break;
		case 6:
			board[1][2] = playerNum;
			break;
		case 7:
			board[2][0] = playerNum;
			break;
		case 8:
			board[2][1] = playerNum;
			break;
		case 9:
			board[2][2] = playerNum;
			break;
	}
		
		totalMoves++;
		//return checkVictory(i-1, column);
		return false;
	}
	
	public boolean canPlace(int column) {
		//return board[0][column] == 0;
		return true;
	}
	
	public boolean isFull() {
		return totalMoves == height * width;
	}

	public boolean checkVictory(int x, int y) {

		int num = board[x][y];
        int count = 0;
        int i = y;
        
        //Horizontal check
        while(i < width && board[x][i] == num){
        	
            count++;
            i++;
        }
        
        i=y-1;
        while(i >= 0 && board[x][i] == num){
        	
            count++;
            i--;
        }
        
        if(count == 3) {
            return true;
        }
        
        //Vertical check
        count = 0;
        int j = x;
        while(j < height && board[j][y] == num){
        	
            count++;
            j++;
        }
        if(count == 3) {
            return true;
        }
        
        //Left diagonal check
        count=0;
        i = x;
        j = y;
        while(i < width && j < height && board[i][j] == num){
        	
            count++;
            i++;
            j++;
        }
        
        i= x-1;
        j= y-1;
        while(i >= 0 && j >= 0 && board[i][j] == num){
        	
            count++;
            i--;
            j--;
        }
        
        if(count == 3) {
            return true;
        }
        
        //Right diagonal check
        count = 0;
        i = x;
        j = y;
        while(i < width && j >= 0 && board[i][j] == num){
        	
            count++;
            i++;
            j--;
        }
        
        i= x-1;
        j= y+1;
        while(i >= 0 && j < height && board[i][j] == num){
            count++;
            i--;
            j++;
        }
        
        if(count == 3) {
            return true;
        }
        
        return false;
    }

	public void updateBoard() {
		
		System.out.println("________");

		for(int i = 0; i < board.length; i++) {
			
			for(int j = 0; j < board[0].length; j++) {
				
				if(board[i][j] == 0) {
					System.out.print("-  ");
				}
				else {
					System.out.print(board[i][j] + "  ");
				}
			}
			System.out.println();
		}
		
		System.out.println("________");
		
	}

	
}