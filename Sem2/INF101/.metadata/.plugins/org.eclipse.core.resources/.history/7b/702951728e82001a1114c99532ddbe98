package inf101.v20.sem2.game;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Random;

public class Connect4 implements IGame {
	
	final int height = 8;
	final int width = 8;
	int totalMoves;
	int[][] board;
	
	public Connect4() {
		board = new int[height][width];
		totalMoves = 0;
	}
	
	public void runMultiplayer() throws IOException {
		
		System.out.println("Welcome to Connect Four!");
		updateBoard();
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		mainLoop:
			while(true) {
				int column = 0;
				//Player1
				while(true) {
					System.out.println("Player 1 placement:");
					column = Integer.parseInt(br.readLine());
					
					if(canPlace(column)) {
						if(place(column, 1)) {
							updateBoard();
							System.out.println("Game over. Player 1 wins!");
							break mainLoop;
						}
						break;
					}
					else {
						System.out.println("Placement in column " + column + " is already taken! Choose new placement: ");
					}
				}
				updateBoard();
				
				//Player 2
					while(true) {
						System.out.println("Player 2 placement:");
						column = Integer.parseInt(br.readLine());
						
						if(canPlace(column)) {
							if(place(column, 2)) {
								updateBoard();
								System.out.println("Game over. Player 2 wins!");
								break mainLoop;
							}
							break;
						}
						else {
							System.out.println("Column " + column + " is already full!");
						}
					}
					updateBoard();
					
					if(isFull()) {
						System.out.println("Its a draw.");
						break;
					}
			}
	}
	
	public void runSingleplayer() throws IOException {

		System.out.println("Welcome to Connect Four!");
		updateBoard();
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		mainLoop:
			while(true) {
				int column = 0;
				//Player1
				while(true) {
					System.out.println("Player 1 placement:");
					column = Integer.parseInt(br.readLine());
					
					if(canPlace(column)) {
						if(place(column, 1)) {
							updateBoard();
							System.out.println("Game over. Player 1 wins!");
							break mainLoop;
						}
						break;
					}
					else {
						System.out.println("Placement in column " + column + " is already taken! Choose new placement: ");
					}
				}
				updateBoard();
				
				//CPU
					while(true) {
						column = getRandomColumn(width);
						
						if(canPlace(column)) {
							if(place(column, 2)) {
								updateBoard();
								System.out.println("Game over. CPU wins!");
								break mainLoop;
							}
							break;
						}
						else {
							System.out.println("");
						}
					}
					updateBoard();
					
					if(isFull()) {
						System.out.println("Its a draw.");
						break;
					}
			}
		
	}


	public int getRandomColumn(int width) {
		
		Random random = new Random();
		int num = random.ints(1, 0, width).findFirst().getAsInt();
		
		return num;
		
	}

	@Override
	public boolean place(int column, int playerNum) {
		int i = 0;
		
		for(i = 0; i < height; i++) {
			
			if(board[i][column] == 1 || board[i][column] == 2) {
				board[i-1][column] = playerNum;
				break;
			}
		}
		
		if(i == height) {
			board[i-1][column] = playerNum;
		}
		
		totalMoves++;
		return checkVictory(i-1, column);
	}
	
	public boolean canPlace(int column) {
		return board[0][column] == 0;
	}
	
	public boolean isFull() {
		return totalMoves == height * width;
	}

	public boolean checkVictory(int x, int y) {

		int num=board[x][y];
        int count=0;
        int i=y;
        
        //Horizontal check
        while(i<width && board[x][i] == num){
            count++;
            i++;
        }
        i=y-1;
        while(i>=0 && board[x][i] == num){
            count++;
            i--;
        }
        if(count == 4)
            return true;
        
        //Vertical check
        count=0;
        int j=x;
        while(j<height && board[j][y] == num){
            count++;
            j++;
        }
        if(count == 4)
            return true;
        
        //Left diagonal check
        count=0;
        i=x;
        j=y;
        while(i<width && j<height && board[i][j] == num){
            count++;
            i++;
            j++;
        }
        i=x-1;
        j=y-1;
        while(i>=0 && j>=0 && board[i][j] == num){
            count++;
            i--;
            j--;
        }
        if(count == 4)
            return true;
        
        //Right diagonal check
        count=0;
        i=x;
        j=y;
        while(i<width && j>=0 && board[i][j] == num){
            count++;
            i++;
            j--;
        }
        i=x-1;
        j=y+1;
        while(i>=0 && j<height && board[i][j] == num){
            count++;
            i--;
            j++;
        }
        if(count == 4)
            return true;
        
        return false;
    }

	public void updateBoard() {

		for(int i = 0; i < board.length; i++) {
			
			for(int j = 0; j < board[0].length; j++) {
				
				if(board[i][j] == 0) {
					System.out.print("_  ");
				}
				else {
					System.out.print(board[i][j] + "  ");
				}
			}
			System.out.println();
		}
		
		System.out.println();
		for(int i = 0; i < width; i++) {
			System.out.print("^  ");
		}
		System.out.println();
		
		for(int i = 0; i < width; i++) {
			System.out.print(i + "  ");
		}
		System.out.println();
		
	}

	
}
